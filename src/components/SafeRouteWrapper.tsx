
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/auth';
import { UserRoleType } from '@/types/auth';

interface SafeRouteWrapperProps {
  children: React.ReactNode;
  requiredRole?: UserRoleType | UserRoleType[];
}

const SafeRouteWrapper: React.FC<SafeRouteWrapperProps> = ({ 
  children, 
  requiredRole 
}) => {
  const { session, userRole, isLoading, isInitialized } = useAuth();
  const location = useLocation();
  
  // Logs ampliados para facilitar la depuraci√≥n
  console.debug('üõ°Ô∏è [SafeRoute] Evaluando acceso a ruta:', location.pathname);
  console.debug('üõ°Ô∏è [SafeRoute] Estado de autenticaci√≥n completo:', { 
    isInitialized, 
    isLoading, 
    hasSession: !!session, 
    sessionExpiry: session?.expires_at ? new Date(session.expires_at * 1000).toISOString() : 'N/A',
    userRole,
    requiredRole,
    currentPath: location.pathname,
    timestamp: new Date().toISOString()
  });
  
  // FASE 1: Verificaci√≥n de inicializaci√≥n
  // Esta es la fase m√°s cr√≠tica y debe ser la primera verificaci√≥n
  if (!isInitialized) {
    console.debug('üõ°Ô∏è [SafeRoute] Sistema de autenticaci√≥n todav√≠a inicializando, mostrando indicador...');
    return (
      <div className="h-screen w-full flex flex-col justify-center items-center bg-background">
        <div className="animate-spin h-10 w-10 border-4 border-primary border-t-transparent rounded-full mb-4"></div>
        <span className="text-primary font-medium">Inicializando sistema de autenticaci√≥n...</span>
        <span className="text-sm text-muted-foreground mt-2">Esto puede tardar unos segundos</span>
      </div>
    );
  }
  
  // FASE 2: Verificaci√≥n de carga
  // Solo se ejecuta DESPU√âS de que la autenticaci√≥n se haya inicializado
  if (isLoading) {
    console.debug('üõ°Ô∏è [SafeRoute] Autenticaci√≥n inicializada pero cargando datos, mostrando spinner...');
    return (
      <div className="h-screen w-full flex justify-center items-center bg-background">
        <div className="animate-spin h-10 w-10 border-4 border-primary border-t-transparent rounded-full"></div>
      </div>
    );
  }
  
  // FASE 3: Verificaci√≥n de sesi√≥n
  // Ahora podemos verificar con seguridad si el usuario tiene sesi√≥n
  if (!session) {
    console.debug('üõ°Ô∏è [SafeRoute] No hay sesi√≥n activa, redirigiendo a login...');
    // Guardamos la ruta actual para redirigir despu√©s del login
    return <Navigate to="/auth/login" state={{ from: location.pathname }} replace />;
  }
  
  // Verificaci√≥n adicional de la validez de la sesi√≥n
  const now = Math.floor(Date.now() / 1000); // Tiempo actual en segundos
  if (session.expires_at && session.expires_at < now) {
    console.debug('üõ°Ô∏è [SafeRoute] Sesi√≥n expirada, redirigiendo a login...');
    return <Navigate to="/auth/login" state={{ from: location.pathname }} replace />;
  }
  
  // FASE 4: Verificaci√≥n de roles (si se especificaron)
  if (requiredRole) {
    const hasRequiredRole = Array.isArray(requiredRole)
      ? requiredRole.includes(userRole as UserRoleType)
      : requiredRole === userRole;
    
    console.debug('üõ°Ô∏è [SafeRoute] Verificaci√≥n de rol:', { 
      requiredRole, 
      userRole, 
      hasRequiredRole 
    });
    
    if (!hasRequiredRole) {
      console.debug('üõ°Ô∏è [SafeRoute] Usuario sin rol requerido, redirigiendo a app...');
      // Redirigir a la p√°gina principal de la aplicaci√≥n si el rol no coincide
      return <Navigate to="/app" replace />;
    }
  }
  
  // FASE 5: Renderizado de la ruta protegida
  // Si llegamos aqu√≠, significa que:
  // 1. La autenticaci√≥n est√° inicializada
  // 2. No estamos en proceso de carga
  // 3. El usuario tiene una sesi√≥n v√°lida
  // 4. El usuario tiene el rol requerido (si se especific√≥)
  console.debug('üõ°Ô∏è [SafeRoute] Todas las verificaciones pasadas, renderizando contenido protegido...');
  return <>{children}</>;
};

export default SafeRouteWrapper;
