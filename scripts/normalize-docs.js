
#!/usr/bin/env node

/**
 * Script para normalizar la documentaci√≥n del proyecto
 * 
 * Este script ejecuta directamente todas las operaciones necesarias para
 * consolidar y normalizar la documentaci√≥n sin depender de ejecuciones externas.
 */

const fs = require('fs');
const path = require('path');

// Directorios principales
const DOCS_LEGACY_DIR = path.join(__dirname, '../docs_nexo/docs_legacy');
const DOCS_NEXO_DIR = path.join(__dirname, '../docs_nexo');
const FEATURES_DIR = path.join(DOCS_NEXO_DIR, 'features');

console.log('üîç Iniciando normalizaci√≥n de documentaci√≥n...');

// Funci√≥n para asegurar que un directorio existe
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`üìÅ Creado directorio: ${dirPath}`);
  }
}

// Funci√≥n para mover archivos conservando su contenido
function moveFile(source, destination) {
  if (fs.existsSync(source)) {
    ensureDirectoryExists(path.dirname(destination));
    fs.copyFileSync(source, destination);
    console.log(`üìÑ Movido: ${source} -> ${destination}`);
  } else {
    console.log(`‚ö†Ô∏è No se encuentra el archivo: ${source}`);
  }
}

// Funci√≥n para consolidar la documentaci√≥n de cursos
function consolidateCoursesDocumentation() {
  console.log('\nüìö Consolidando documentaci√≥n de cursos...');
  
  // Asegurar que existe el directorio de cursos
  const coursesDir = path.join(FEATURES_DIR, 'courses');
  ensureDirectoryExists(coursesDir);
  
  // Buscar documentaci√≥n de cursos en legacy y moverla
  const legacyCoursesFiles = [
    { src: path.join(DOCS_LEGACY_DIR, '03_features/courses.md'), 
      dest: path.join(coursesDir, 'legacy-courses.md') },
    { src: path.join(DOCS_LEGACY_DIR, 'lesson-editor-system.md'), 
      dest: path.join(coursesDir, 'lesson-editor.md') }
  ];
  
  legacyCoursesFiles.forEach(file => {
    moveFile(file.src, file.dest);
  });
}

// Funci√≥n para consolidar la documentaci√≥n de CI/CD
function consolidateCICD() {
  console.log('\nüîÑ Consolidando documentaci√≥n de CI/CD...');
  
  // Crear directorio para CI/CD
  const cicdDir = path.join(DOCS_NEXO_DIR, 'core/ci_cd');
  ensureDirectoryExists(cicdDir);
  
  // Mover documentaci√≥n de CI/CD
  moveFile(
    path.join(DOCS_LEGACY_DIR, 'ci_cd/ci_cd_documentation.md'), 
    path.join(cicdDir, 'overview.md')
  );
}

// Funci√≥n para consolidar la documentaci√≥n de API
function consolidateAPI() {
  console.log('\nüîå Consolidando documentaci√≥n de API...');
  
  // Crear directorio para API
  const apiDir = path.join(DOCS_NEXO_DIR, 'api');
  ensureDirectoryExists(apiDir);
  
  // Asegurar que existe el directorio de endpoints
  const endpointsDir = path.join(apiDir, 'endpoints');
  ensureDirectoryExists(endpointsDir);
  
  // Mover README de API si existe
  moveFile(
    path.join(DOCS_LEGACY_DIR, 'api/README.md'), 
    path.join(apiDir, 'README.md')
  );
}

// Funci√≥n para consolidar documentaci√≥n de gu√≠as
function consolidateGuides() {
  console.log('\nüìò Consolidando gu√≠as...');
  
  // Crear directorio de gu√≠as
  const guidesDir = path.join(DOCS_NEXO_DIR, 'guides');
  ensureDirectoryExists(guidesDir);
  
  // Mover gu√≠as de usuario
  moveFile(
    path.join(DOCS_LEGACY_DIR, 'guias/primeros-pasos.md'), 
    path.join(guidesDir, 'getting-started.md')
  );
  
  // Mover README de gu√≠as
  moveFile(
    path.join(DOCS_LEGACY_DIR, 'guias/README.md'), 
    path.join(guidesDir, 'user-guides-index.md')
  );
}

// Ejecutar todas las funciones de consolidaci√≥n
try {
  consolidateCoursesDocumentation();
  consolidateCICD();
  consolidateAPI();
  consolidateGuides();
  
  console.log('\n‚úÖ Normalizaci√≥n de documentaci√≥n completada con √©xito.');
  console.log('\n‚ÑπÔ∏è Este script ha realizado una consolidaci√≥n b√°sica. Para una migraci√≥n completa,');
  console.log('revisa el contenido movido y ajusta seg√∫n sea necesario.');
  
} catch (error) {
  console.error('\n‚ùå Error durante la normalizaci√≥n:', error.message);
  process.exit(1);
}

